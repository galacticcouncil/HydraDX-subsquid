// This file has been auto-generated by Warthog.  Do not update directly as it
// will be re-written.  If you need to change this file, update models or add
// new TypeGraphQL objects
// prettier-ignore
// @ts-ignore
import { DateResolver as Date } from 'graphql-scalars';
// prettier-ignore
// @ts-ignore
import { GraphQLID as ID } from 'graphql';
// prettier-ignore
// @ts-ignore
import { ArgsType, Field as TypeGraphQLField, Float, InputType as TypeGraphQLInputType, Int } from 'type-graphql';
// prettier-ignore
// @ts-ignore
import { registerEnumType, GraphQLISODateTime as DateTime } from "type-graphql";

import * as BN from "bn.js";

// prettier-ignore
// @ts-ignore eslint-disable-next-line @typescript-eslint/no-var-requires
const { GraphQLJSONObject } = require('graphql-type-json');
// prettier-ignore
// @ts-ignore
import { BaseWhereInput, JsonObject, PaginationArgs, DateOnlyString, DateTimeString, BigInt, Bytes } from '@subsquid/warthog';

// @ts-ignore
import { AssetPriceInTime } from "../modules/asset-price-in-time/asset-price-in-time.model";
// @ts-ignore
import { AssetPrice } from "../modules/asset-price/asset-price.model";
// @ts-ignore
import { TradeTransfer } from "../modules/trade-transfer/trade-transfer.model";
// @ts-ignore
import { DirectTradeFee } from "../modules/jsonfields/jsonfields.model";
// @ts-ignore
import { SwapAction } from "../modules/swap-action/swap-action.model";
// @ts-ignore
import { Token } from "../modules/token/token.model";
// @ts-ignore
import { PoolAssetVolume } from "../modules/pool-asset-volume/pool-asset-volume.model";
// @ts-ignore
import { Pool } from "../modules/pool/pool.model";
// @ts-ignore
import { Account } from "../modules/account/account.model";
// @ts-ignore
import { NoBondRecordAccount } from "../modules/no-bond-record-account/no-bond-record-account.model";
// @ts-ignore
import { StakingReward } from "../modules/staking-reward/staking-reward.model";
// @ts-ignore
import { StakingSlash } from "../modules/staking-slash/staking-slash.model";
// @ts-ignore
import { SumReward } from "../modules/sum-reward/sum-reward.model";

export enum AssetPriceInTimeOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  timestamp_ASC = "timestamp_ASC",
  timestamp_DESC = "timestamp_DESC",

  price_ASC = "price_ASC",
  price_DESC = "price_DESC",
}

registerEnumType(AssetPriceInTimeOrderByEnum, {
  name: "AssetPriceInTimeOrderByInput",
});

@TypeGraphQLInputType()
export class AssetPriceInTimeWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  createdById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  createdById_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  updatedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  updatedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  deletedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  deletedById_in?: string[];

  @TypeGraphQLField(() => BigInt, { nullable: true })
  timestamp_eq?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  timestamp_gt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  timestamp_gte?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  timestamp_lt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  timestamp_lte?: string;

  @TypeGraphQLField(() => [BigInt], { nullable: true })
  timestamp_in?: string[];

  @TypeGraphQLField(() => BigInt, { nullable: true })
  price_eq?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  price_gt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  price_gte?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  price_lt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  price_lte?: string;

  @TypeGraphQLField(() => [BigInt], { nullable: true })
  price_in?: string[];

  @TypeGraphQLField(() => AssetPriceWhereInput, { nullable: true })
  assetpriceprices_none?: AssetPriceWhereInput;

  @TypeGraphQLField(() => AssetPriceWhereInput, { nullable: true })
  assetpriceprices_some?: AssetPriceWhereInput;

  @TypeGraphQLField(() => AssetPriceWhereInput, { nullable: true })
  assetpriceprices_every?: AssetPriceWhereInput;

  @TypeGraphQLField(() => AssetPriceInTimeWhereInput, { nullable: true })
  AND?: [AssetPriceInTimeWhereInput];

  @TypeGraphQLField(() => AssetPriceInTimeWhereInput, { nullable: true })
  OR?: [AssetPriceInTimeWhereInput];
}

@TypeGraphQLInputType()
export class AssetPriceInTimeWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class AssetPriceInTimeCreateInput {
  @TypeGraphQLField()
  timestamp!: string;

  @TypeGraphQLField({ nullable: true })
  price?: string;
}

@TypeGraphQLInputType()
export class AssetPriceInTimeUpdateInput {
  @TypeGraphQLField({ nullable: true })
  timestamp?: string;

  @TypeGraphQLField({ nullable: true })
  price?: string;
}

@ArgsType()
export class AssetPriceInTimeWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => AssetPriceInTimeWhereInput, { nullable: true })
  where?: AssetPriceInTimeWhereInput;

  @TypeGraphQLField(() => AssetPriceInTimeOrderByEnum, { nullable: true })
  orderBy?: AssetPriceInTimeOrderByEnum[];
}

@ArgsType()
export class AssetPriceInTimeCreateManyArgs {
  @TypeGraphQLField(() => [AssetPriceInTimeCreateInput])
  data!: AssetPriceInTimeCreateInput[];
}

@ArgsType()
export class AssetPriceInTimeUpdateArgs {
  @TypeGraphQLField() data!: AssetPriceInTimeUpdateInput;
  @TypeGraphQLField() where!: AssetPriceInTimeWhereUniqueInput;
}

export enum AssetPriceOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  tokenZero_ASC = "tokenZero_ASC",
  tokenZero_DESC = "tokenZero_DESC",

  tokenOne_ASC = "tokenOne_ASC",
  tokenOne_DESC = "tokenOne_DESC",

  pairName_ASC = "pairName_ASC",
  pairName_DESC = "pairName_DESC",

  prices_ASC = "prices_ASC",
  prices_DESC = "prices_DESC",
}

registerEnumType(AssetPriceOrderByEnum, {
  name: "AssetPriceOrderByInput",
});

@TypeGraphQLInputType()
export class AssetPriceWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  createdById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  createdById_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  updatedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  updatedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  deletedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  deletedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  pairName_eq?: string;

  @TypeGraphQLField({ nullable: true })
  pairName_contains?: string;

  @TypeGraphQLField({ nullable: true })
  pairName_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  pairName_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  pairName_in?: string[];

  @TypeGraphQLField(() => TokenWhereInput, { nullable: true })
  tokenZero?: TokenWhereInput;

  @TypeGraphQLField(() => TokenWhereInput, { nullable: true })
  tokenOne?: TokenWhereInput;

  @TypeGraphQLField(() => AssetPriceInTimeWhereInput, { nullable: true })
  prices?: AssetPriceInTimeWhereInput;

  @TypeGraphQLField(() => AssetPriceWhereInput, { nullable: true })
  AND?: [AssetPriceWhereInput];

  @TypeGraphQLField(() => AssetPriceWhereInput, { nullable: true })
  OR?: [AssetPriceWhereInput];
}

@TypeGraphQLInputType()
export class AssetPriceWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class AssetPriceCreateInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  tokenZero?: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  tokenOne?: string;

  @TypeGraphQLField()
  pairName!: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  prices?: string;
}

@TypeGraphQLInputType()
export class AssetPriceUpdateInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  tokenZero?: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  tokenOne?: string;

  @TypeGraphQLField({ nullable: true })
  pairName?: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  prices?: string;
}

@ArgsType()
export class AssetPriceWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => AssetPriceWhereInput, { nullable: true })
  where?: AssetPriceWhereInput;

  @TypeGraphQLField(() => AssetPriceOrderByEnum, { nullable: true })
  orderBy?: AssetPriceOrderByEnum[];
}

@ArgsType()
export class AssetPriceCreateManyArgs {
  @TypeGraphQLField(() => [AssetPriceCreateInput])
  data!: AssetPriceCreateInput[];
}

@ArgsType()
export class AssetPriceUpdateArgs {
  @TypeGraphQLField() data!: AssetPriceUpdateInput;
  @TypeGraphQLField() where!: AssetPriceWhereUniqueInput;
}

export enum TradeTransferOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  timestamp_ASC = "timestamp_ASC",
  timestamp_DESC = "timestamp_DESC",

  block_ASC = "block_ASC",
  block_DESC = "block_DESC",

  swapAction_ASC = "swapAction_ASC",
  swapAction_DESC = "swapAction_DESC",

  accountReceived_ASC = "accountReceived_ASC",
  accountReceived_DESC = "accountReceived_DESC",

  accountSent_ASC = "accountSent_ASC",
  accountSent_DESC = "accountSent_DESC",

  amountReceived_ASC = "amountReceived_ASC",
  amountReceived_DESC = "amountReceived_DESC",

  amountSent_ASC = "amountSent_ASC",
  amountSent_DESC = "amountSent_DESC",
}

registerEnumType(TradeTransferOrderByEnum, {
  name: "TradeTransferOrderByInput",
});

@TypeGraphQLInputType()
export class TradeTransferWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  createdById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  createdById_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  updatedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  updatedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  deletedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  deletedById_in?: string[];

  @TypeGraphQLField(() => BigInt, { nullable: true })
  timestamp_eq?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  timestamp_gt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  timestamp_gte?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  timestamp_lt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  timestamp_lte?: string;

  @TypeGraphQLField(() => [BigInt], { nullable: true })
  timestamp_in?: string[];

  @TypeGraphQLField({ nullable: true })
  block_eq?: string;

  @TypeGraphQLField({ nullable: true })
  block_contains?: string;

  @TypeGraphQLField({ nullable: true })
  block_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  block_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  block_in?: string[];

  @TypeGraphQLField(() => BigInt, { nullable: true })
  amountReceived_eq?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  amountReceived_gt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  amountReceived_gte?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  amountReceived_lt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  amountReceived_lte?: string;

  @TypeGraphQLField(() => [BigInt], { nullable: true })
  amountReceived_in?: string[];

  @TypeGraphQLField(() => BigInt, { nullable: true })
  amountSent_eq?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  amountSent_gt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  amountSent_gte?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  amountSent_lt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  amountSent_lte?: string;

  @TypeGraphQLField(() => [BigInt], { nullable: true })
  amountSent_in?: string[];

  @TypeGraphQLField(() => SwapActionWhereInput, { nullable: true })
  swapAction?: SwapActionWhereInput;

  @TypeGraphQLField(() => AccountWhereInput, { nullable: true })
  accountReceived?: AccountWhereInput;

  @TypeGraphQLField(() => AccountWhereInput, { nullable: true })
  accountSent?: AccountWhereInput;

  @TypeGraphQLField(() => TradeTransferWhereInput, { nullable: true })
  AND?: [TradeTransferWhereInput];

  @TypeGraphQLField(() => TradeTransferWhereInput, { nullable: true })
  OR?: [TradeTransferWhereInput];
}

@TypeGraphQLInputType()
export class TradeTransferWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class TradeTransferCreateInput {
  @TypeGraphQLField()
  timestamp!: string;

  @TypeGraphQLField()
  block!: string;

  @TypeGraphQLField(() => ID)
  swapAction!: string;

  @TypeGraphQLField(() => ID)
  accountReceived!: string;

  @TypeGraphQLField(() => ID)
  accountSent!: string;

  @TypeGraphQLField({ nullable: true })
  amountReceived?: string;

  @TypeGraphQLField({ nullable: true })
  amountSent?: string;
}

@TypeGraphQLInputType()
export class TradeTransferUpdateInput {
  @TypeGraphQLField({ nullable: true })
  timestamp?: string;

  @TypeGraphQLField({ nullable: true })
  block?: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  swapAction?: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  accountReceived?: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  accountSent?: string;

  @TypeGraphQLField({ nullable: true })
  amountReceived?: string;

  @TypeGraphQLField({ nullable: true })
  amountSent?: string;
}

@ArgsType()
export class TradeTransferWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => TradeTransferWhereInput, { nullable: true })
  where?: TradeTransferWhereInput;

  @TypeGraphQLField(() => TradeTransferOrderByEnum, { nullable: true })
  orderBy?: TradeTransferOrderByEnum[];
}

@ArgsType()
export class TradeTransferCreateManyArgs {
  @TypeGraphQLField(() => [TradeTransferCreateInput])
  data!: TradeTransferCreateInput[];
}

@ArgsType()
export class TradeTransferUpdateArgs {
  @TypeGraphQLField() data!: TradeTransferUpdateInput;
  @TypeGraphQLField() where!: TradeTransferWhereUniqueInput;
}

export enum DirectTradeFeeOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  account1_ASC = "account1_ASC",
  account1_DESC = "account1_DESC",

  account2_ASC = "account2_ASC",
  account2_DESC = "account2_DESC",

  asset_ASC = "asset_ASC",
  asset_DESC = "asset_DESC",

  amount_ASC = "amount_ASC",
  amount_DESC = "amount_DESC",
}

registerEnumType(DirectTradeFeeOrderByEnum, {
  name: "DirectTradeFeeOrderByInput",
});

@TypeGraphQLInputType()
export class DirectTradeFeeWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  createdById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  createdById_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  updatedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  updatedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  deletedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  deletedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  account1_eq?: string;

  @TypeGraphQLField({ nullable: true })
  account1_contains?: string;

  @TypeGraphQLField({ nullable: true })
  account1_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  account1_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  account1_in?: string[];

  @TypeGraphQLField({ nullable: true })
  account2_eq?: string;

  @TypeGraphQLField({ nullable: true })
  account2_contains?: string;

  @TypeGraphQLField({ nullable: true })
  account2_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  account2_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  account2_in?: string[];

  @TypeGraphQLField({ nullable: true })
  asset_eq?: string;

  @TypeGraphQLField({ nullable: true })
  asset_contains?: string;

  @TypeGraphQLField({ nullable: true })
  asset_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  asset_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  asset_in?: string[];

  @TypeGraphQLField(() => BigInt, { nullable: true })
  amount_eq?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  amount_gt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  amount_gte?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  amount_lt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  amount_lte?: string;

  @TypeGraphQLField(() => [BigInt], { nullable: true })
  amount_in?: string[];

  @TypeGraphQLField(() => DirectTradeFeeWhereInput, { nullable: true })
  AND?: [DirectTradeFeeWhereInput];

  @TypeGraphQLField(() => DirectTradeFeeWhereInput, { nullable: true })
  OR?: [DirectTradeFeeWhereInput];
}

@TypeGraphQLInputType()
export class DirectTradeFeeWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class DirectTradeFeeCreateInput {
  @TypeGraphQLField({ nullable: true })
  account1?: string;

  @TypeGraphQLField({ nullable: true })
  account2?: string;

  @TypeGraphQLField({ nullable: true })
  asset?: string;

  @TypeGraphQLField({ nullable: true })
  amount?: string;
}

@TypeGraphQLInputType()
export class DirectTradeFeeUpdateInput {
  @TypeGraphQLField({ nullable: true })
  account1?: string;

  @TypeGraphQLField({ nullable: true })
  account2?: string;

  @TypeGraphQLField({ nullable: true })
  asset?: string;

  @TypeGraphQLField({ nullable: true })
  amount?: string;
}

@ArgsType()
export class DirectTradeFeeWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => DirectTradeFeeWhereInput, { nullable: true })
  where?: DirectTradeFeeWhereInput;

  @TypeGraphQLField(() => DirectTradeFeeOrderByEnum, { nullable: true })
  orderBy?: DirectTradeFeeOrderByEnum[];
}

@ArgsType()
export class DirectTradeFeeCreateManyArgs {
  @TypeGraphQLField(() => [DirectTradeFeeCreateInput])
  data!: DirectTradeFeeCreateInput[];
}

@ArgsType()
export class DirectTradeFeeUpdateArgs {
  @TypeGraphQLField() data!: DirectTradeFeeUpdateInput;
  @TypeGraphQLField() where!: DirectTradeFeeWhereUniqueInput;
}

export enum SwapActionOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  timestamp_ASC = "timestamp_ASC",
  timestamp_DESC = "timestamp_DESC",

  block_ASC = "block_ASC",
  block_DESC = "block_DESC",

  intentionType_ASC = "intentionType_ASC",
  intentionType_DESC = "intentionType_DESC",

  slippage_ASC = "slippage_ASC",
  slippage_DESC = "slippage_DESC",

  totalFeeFinal_ASC = "totalFeeFinal_ASC",
  totalFeeFinal_DESC = "totalFeeFinal_DESC",

  match_ASC = "match_ASC",
  match_DESC = "match_DESC",

  totalDirectTradeExchanged_ASC = "totalDirectTradeExchanged_ASC",
  totalDirectTradeExchanged_DESC = "totalDirectTradeExchanged_DESC",

  saved_ASC = "saved_ASC",
  saved_DESC = "saved_DESC",

  account_ASC = "account_ASC",
  account_DESC = "account_DESC",

  tokenZero_ASC = "tokenZero_ASC",
  tokenZero_DESC = "tokenZero_DESC",

  tokenOne_ASC = "tokenOne_ASC",
  tokenOne_DESC = "tokenOne_DESC",

  amount_ASC = "amount_ASC",
  amount_DESC = "amount_DESC",

  amountXykTrade_ASC = "amountXykTrade_ASC",
  amountXykTrade_DESC = "amountXykTrade_DESC",

  amountOutXykTrade_ASC = "amountOutXykTrade_ASC",
  amountOutXykTrade_DESC = "amountOutXykTrade_DESC",

  amountSoldBought_ASC = "amountSoldBought_ASC",
  amountSoldBought_DESC = "amountSoldBought_DESC",

  totalAmountFinal_ASC = "totalAmountFinal_ASC",
  totalAmountFinal_DESC = "totalAmountFinal_DESC",

  assetsPair_ASC = "assetsPair_ASC",
  assetsPair_DESC = "assetsPair_DESC",

  xykTradePool_ASC = "xykTradePool_ASC",
  xykTradePool_DESC = "xykTradePool_DESC",
}

registerEnumType(SwapActionOrderByEnum, {
  name: "SwapActionOrderByInput",
});

@TypeGraphQLInputType()
export class SwapActionWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  createdById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  createdById_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  updatedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  updatedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  deletedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  deletedById_in?: string[];

  @TypeGraphQLField(() => BigInt, { nullable: true })
  timestamp_eq?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  timestamp_gt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  timestamp_gte?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  timestamp_lt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  timestamp_lte?: string;

  @TypeGraphQLField(() => [BigInt], { nullable: true })
  timestamp_in?: string[];

  @TypeGraphQLField({ nullable: true })
  block_eq?: string;

  @TypeGraphQLField({ nullable: true })
  block_contains?: string;

  @TypeGraphQLField({ nullable: true })
  block_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  block_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  block_in?: string[];

  @TypeGraphQLField({ nullable: true })
  intentionType_eq?: string;

  @TypeGraphQLField({ nullable: true })
  intentionType_contains?: string;

  @TypeGraphQLField({ nullable: true })
  intentionType_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  intentionType_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  intentionType_in?: string[];

  @TypeGraphQLField(() => BigInt, { nullable: true })
  slippage_eq?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  slippage_gt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  slippage_gte?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  slippage_lt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  slippage_lte?: string;

  @TypeGraphQLField(() => [BigInt], { nullable: true })
  slippage_in?: string[];

  @TypeGraphQLField(() => GraphQLJSONObject, { nullable: true })
  fees_json?: JsonObject;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  totalFeeFinal_eq?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  totalFeeFinal_gt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  totalFeeFinal_gte?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  totalFeeFinal_lt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  totalFeeFinal_lte?: string;

  @TypeGraphQLField(() => [BigInt], { nullable: true })
  totalFeeFinal_in?: string[];

  @TypeGraphQLField(() => BigInt, { nullable: true })
  match_eq?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  match_gt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  match_gte?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  match_lt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  match_lte?: string;

  @TypeGraphQLField(() => [BigInt], { nullable: true })
  match_in?: string[];

  @TypeGraphQLField(() => BigInt, { nullable: true })
  totalDirectTradeExchanged_eq?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  totalDirectTradeExchanged_gt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  totalDirectTradeExchanged_gte?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  totalDirectTradeExchanged_lt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  totalDirectTradeExchanged_lte?: string;

  @TypeGraphQLField(() => [BigInt], { nullable: true })
  totalDirectTradeExchanged_in?: string[];

  @TypeGraphQLField(() => BigInt, { nullable: true })
  saved_eq?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  saved_gt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  saved_gte?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  saved_lt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  saved_lte?: string;

  @TypeGraphQLField(() => [BigInt], { nullable: true })
  saved_in?: string[];

  @TypeGraphQLField(() => BigInt, { nullable: true })
  amount_eq?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  amount_gt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  amount_gte?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  amount_lt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  amount_lte?: string;

  @TypeGraphQLField(() => [BigInt], { nullable: true })
  amount_in?: string[];

  @TypeGraphQLField(() => BigInt, { nullable: true })
  amountXykTrade_eq?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  amountXykTrade_gt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  amountXykTrade_gte?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  amountXykTrade_lt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  amountXykTrade_lte?: string;

  @TypeGraphQLField(() => [BigInt], { nullable: true })
  amountXykTrade_in?: string[];

  @TypeGraphQLField(() => BigInt, { nullable: true })
  amountOutXykTrade_eq?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  amountOutXykTrade_gt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  amountOutXykTrade_gte?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  amountOutXykTrade_lt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  amountOutXykTrade_lte?: string;

  @TypeGraphQLField(() => [BigInt], { nullable: true })
  amountOutXykTrade_in?: string[];

  @TypeGraphQLField(() => BigInt, { nullable: true })
  amountSoldBought_eq?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  amountSoldBought_gt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  amountSoldBought_gte?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  amountSoldBought_lt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  amountSoldBought_lte?: string;

  @TypeGraphQLField(() => [BigInt], { nullable: true })
  amountSoldBought_in?: string[];

  @TypeGraphQLField(() => BigInt, { nullable: true })
  totalAmountFinal_eq?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  totalAmountFinal_gt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  totalAmountFinal_gte?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  totalAmountFinal_lt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  totalAmountFinal_lte?: string;

  @TypeGraphQLField(() => [BigInt], { nullable: true })
  totalAmountFinal_in?: string[];

  @TypeGraphQLField({ nullable: true })
  assetsPair_eq?: string;

  @TypeGraphQLField({ nullable: true })
  assetsPair_contains?: string;

  @TypeGraphQLField({ nullable: true })
  assetsPair_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  assetsPair_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  assetsPair_in?: string[];

  @TypeGraphQLField(() => AccountWhereInput, { nullable: true })
  account?: AccountWhereInput;

  @TypeGraphQLField(() => TokenWhereInput, { nullable: true })
  tokenZero?: TokenWhereInput;

  @TypeGraphQLField(() => TokenWhereInput, { nullable: true })
  tokenOne?: TokenWhereInput;

  @TypeGraphQLField(() => PoolWhereInput, { nullable: true })
  xykTradePool?: PoolWhereInput;

  @TypeGraphQLField(() => TradeTransferWhereInput, { nullable: true })
  directTrades_none?: TradeTransferWhereInput;

  @TypeGraphQLField(() => TradeTransferWhereInput, { nullable: true })
  directTrades_some?: TradeTransferWhereInput;

  @TypeGraphQLField(() => TradeTransferWhereInput, { nullable: true })
  directTrades_every?: TradeTransferWhereInput;

  @TypeGraphQLField(() => SwapActionWhereInput, { nullable: true })
  AND?: [SwapActionWhereInput];

  @TypeGraphQLField(() => SwapActionWhereInput, { nullable: true })
  OR?: [SwapActionWhereInput];
}

@TypeGraphQLInputType()
export class SwapActionWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class SwapActionCreateInput {
  @TypeGraphQLField()
  timestamp!: string;

  @TypeGraphQLField()
  block!: string;

  @TypeGraphQLField()
  intentionType!: string;

  @TypeGraphQLField({ nullable: true })
  slippage?: string;

  @TypeGraphQLField(() => DirectTradeFee, { nullable: true })
  fees?: DirectTradeFee;

  @TypeGraphQLField({ nullable: true })
  totalFeeFinal?: string;

  @TypeGraphQLField({ nullable: true })
  match?: string;

  @TypeGraphQLField({ nullable: true })
  totalDirectTradeExchanged?: string;

  @TypeGraphQLField({ nullable: true })
  saved?: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  account?: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  tokenZero?: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  tokenOne?: string;

  @TypeGraphQLField({ nullable: true })
  amount?: string;

  @TypeGraphQLField({ nullable: true })
  amountXykTrade?: string;

  @TypeGraphQLField({ nullable: true })
  amountOutXykTrade?: string;

  @TypeGraphQLField({ nullable: true })
  amountSoldBought?: string;

  @TypeGraphQLField({ nullable: true })
  totalAmountFinal?: string;

  @TypeGraphQLField({ nullable: true })
  assetsPair?: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  xykTradePool?: string;
}

@TypeGraphQLInputType()
export class SwapActionUpdateInput {
  @TypeGraphQLField({ nullable: true })
  timestamp?: string;

  @TypeGraphQLField({ nullable: true })
  block?: string;

  @TypeGraphQLField({ nullable: true })
  intentionType?: string;

  @TypeGraphQLField({ nullable: true })
  slippage?: string;

  @TypeGraphQLField(() => DirectTradeFee, { nullable: true })
  fees?: DirectTradeFee;

  @TypeGraphQLField({ nullable: true })
  totalFeeFinal?: string;

  @TypeGraphQLField({ nullable: true })
  match?: string;

  @TypeGraphQLField({ nullable: true })
  totalDirectTradeExchanged?: string;

  @TypeGraphQLField({ nullable: true })
  saved?: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  account?: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  tokenZero?: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  tokenOne?: string;

  @TypeGraphQLField({ nullable: true })
  amount?: string;

  @TypeGraphQLField({ nullable: true })
  amountXykTrade?: string;

  @TypeGraphQLField({ nullable: true })
  amountOutXykTrade?: string;

  @TypeGraphQLField({ nullable: true })
  amountSoldBought?: string;

  @TypeGraphQLField({ nullable: true })
  totalAmountFinal?: string;

  @TypeGraphQLField({ nullable: true })
  assetsPair?: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  xykTradePool?: string;
}

@ArgsType()
export class SwapActionWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => SwapActionWhereInput, { nullable: true })
  where?: SwapActionWhereInput;

  @TypeGraphQLField(() => SwapActionOrderByEnum, { nullable: true })
  orderBy?: SwapActionOrderByEnum[];
}

@ArgsType()
export class SwapActionCreateManyArgs {
  @TypeGraphQLField(() => [SwapActionCreateInput])
  data!: SwapActionCreateInput[];
}

@ArgsType()
export class SwapActionUpdateArgs {
  @TypeGraphQLField() data!: SwapActionUpdateInput;
  @TypeGraphQLField() where!: SwapActionWhereUniqueInput;
}

export enum TokenOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  decimal_ASC = "decimal_ASC",
  decimal_DESC = "decimal_DESC",

  name_ASC = "name_ASC",
  name_DESC = "name_DESC",

  shared_ASC = "shared_ASC",
  shared_DESC = "shared_DESC",

  parentPool_ASC = "parentPool_ASC",
  parentPool_DESC = "parentPool_DESC",
}

registerEnumType(TokenOrderByEnum, {
  name: "TokenOrderByInput",
});

@TypeGraphQLInputType()
export class TokenWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  createdById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  createdById_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  updatedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  updatedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  deletedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  deletedById_in?: string[];

  @TypeGraphQLField(() => Int, { nullable: true })
  decimal_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  decimal_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  decimal_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  decimal_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  decimal_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  decimal_in?: number[];

  @TypeGraphQLField({ nullable: true })
  name_eq?: string;

  @TypeGraphQLField({ nullable: true })
  name_contains?: string;

  @TypeGraphQLField({ nullable: true })
  name_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  name_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  name_in?: string[];

  @TypeGraphQLField(() => Boolean, { nullable: true })
  shared_eq?: Boolean;

  @TypeGraphQLField(() => [Boolean], { nullable: true })
  shared_in?: Boolean[];

  @TypeGraphQLField(() => PoolWhereInput, { nullable: true })
  parentPool?: PoolWhereInput;

  @TypeGraphQLField(() => AssetPriceWhereInput, { nullable: true })
  assetpricetokenZero_none?: AssetPriceWhereInput;

  @TypeGraphQLField(() => AssetPriceWhereInput, { nullable: true })
  assetpricetokenZero_some?: AssetPriceWhereInput;

  @TypeGraphQLField(() => AssetPriceWhereInput, { nullable: true })
  assetpricetokenZero_every?: AssetPriceWhereInput;

  @TypeGraphQLField(() => AssetPriceWhereInput, { nullable: true })
  assetpricetokenOne_none?: AssetPriceWhereInput;

  @TypeGraphQLField(() => AssetPriceWhereInput, { nullable: true })
  assetpricetokenOne_some?: AssetPriceWhereInput;

  @TypeGraphQLField(() => AssetPriceWhereInput, { nullable: true })
  assetpricetokenOne_every?: AssetPriceWhereInput;

  @TypeGraphQLField(() => PoolWhereInput, { nullable: true })
  poolsharedToken_none?: PoolWhereInput;

  @TypeGraphQLField(() => PoolWhereInput, { nullable: true })
  poolsharedToken_some?: PoolWhereInput;

  @TypeGraphQLField(() => PoolWhereInput, { nullable: true })
  poolsharedToken_every?: PoolWhereInput;

  @TypeGraphQLField(() => PoolWhereInput, { nullable: true })
  pooltokenZero_none?: PoolWhereInput;

  @TypeGraphQLField(() => PoolWhereInput, { nullable: true })
  pooltokenZero_some?: PoolWhereInput;

  @TypeGraphQLField(() => PoolWhereInput, { nullable: true })
  pooltokenZero_every?: PoolWhereInput;

  @TypeGraphQLField(() => PoolWhereInput, { nullable: true })
  pooltokenOne_none?: PoolWhereInput;

  @TypeGraphQLField(() => PoolWhereInput, { nullable: true })
  pooltokenOne_some?: PoolWhereInput;

  @TypeGraphQLField(() => PoolWhereInput, { nullable: true })
  pooltokenOne_every?: PoolWhereInput;

  @TypeGraphQLField(() => SwapActionWhereInput, { nullable: true })
  swapactiontokenZero_none?: SwapActionWhereInput;

  @TypeGraphQLField(() => SwapActionWhereInput, { nullable: true })
  swapactiontokenZero_some?: SwapActionWhereInput;

  @TypeGraphQLField(() => SwapActionWhereInput, { nullable: true })
  swapactiontokenZero_every?: SwapActionWhereInput;

  @TypeGraphQLField(() => SwapActionWhereInput, { nullable: true })
  swapactiontokenOne_none?: SwapActionWhereInput;

  @TypeGraphQLField(() => SwapActionWhereInput, { nullable: true })
  swapactiontokenOne_some?: SwapActionWhereInput;

  @TypeGraphQLField(() => SwapActionWhereInput, { nullable: true })
  swapactiontokenOne_every?: SwapActionWhereInput;

  @TypeGraphQLField(() => TokenWhereInput, { nullable: true })
  AND?: [TokenWhereInput];

  @TypeGraphQLField(() => TokenWhereInput, { nullable: true })
  OR?: [TokenWhereInput];
}

@TypeGraphQLInputType()
export class TokenWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class TokenCreateInput {
  @TypeGraphQLField()
  decimal!: number;

  @TypeGraphQLField()
  name!: string;

  @TypeGraphQLField()
  shared!: boolean;

  @TypeGraphQLField(() => ID, { nullable: true })
  parentPool?: string;
}

@TypeGraphQLInputType()
export class TokenUpdateInput {
  @TypeGraphQLField({ nullable: true })
  decimal?: number;

  @TypeGraphQLField({ nullable: true })
  name?: string;

  @TypeGraphQLField({ nullable: true })
  shared?: boolean;

  @TypeGraphQLField(() => ID, { nullable: true })
  parentPool?: string;
}

@ArgsType()
export class TokenWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => TokenWhereInput, { nullable: true })
  where?: TokenWhereInput;

  @TypeGraphQLField(() => TokenOrderByEnum, { nullable: true })
  orderBy?: TokenOrderByEnum[];
}

@ArgsType()
export class TokenCreateManyArgs {
  @TypeGraphQLField(() => [TokenCreateInput])
  data!: TokenCreateInput[];
}

@ArgsType()
export class TokenUpdateArgs {
  @TypeGraphQLField() data!: TokenUpdateInput;
  @TypeGraphQLField() where!: TokenWhereUniqueInput;
}

export enum PoolAssetVolumeOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  pool_ASC = "pool_ASC",
  pool_DESC = "pool_DESC",

  timestamp_ASC = "timestamp_ASC",
  timestamp_DESC = "timestamp_DESC",

  tokenZeroAmount_ASC = "tokenZeroAmount_ASC",
  tokenZeroAmount_DESC = "tokenZeroAmount_DESC",

  tokenOneAmount_ASC = "tokenOneAmount_ASC",
  tokenOneAmount_DESC = "tokenOneAmount_DESC",

  sharedAssetAmount_ASC = "sharedAssetAmount_ASC",
  sharedAssetAmount_DESC = "sharedAssetAmount_DESC",

  marketCap_ASC = "marketCap_ASC",
  marketCap_DESC = "marketCap_DESC",

  tradeAmount_ASC = "tradeAmount_ASC",
  tradeAmount_DESC = "tradeAmount_DESC",
}

registerEnumType(PoolAssetVolumeOrderByEnum, {
  name: "PoolAssetVolumeOrderByInput",
});

@TypeGraphQLInputType()
export class PoolAssetVolumeWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  createdById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  createdById_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  updatedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  updatedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  deletedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  deletedById_in?: string[];

  @TypeGraphQLField(() => BigInt, { nullable: true })
  timestamp_eq?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  timestamp_gt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  timestamp_gte?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  timestamp_lt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  timestamp_lte?: string;

  @TypeGraphQLField(() => [BigInt], { nullable: true })
  timestamp_in?: string[];

  @TypeGraphQLField(() => BigInt, { nullable: true })
  tokenZeroAmount_eq?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  tokenZeroAmount_gt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  tokenZeroAmount_gte?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  tokenZeroAmount_lt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  tokenZeroAmount_lte?: string;

  @TypeGraphQLField(() => [BigInt], { nullable: true })
  tokenZeroAmount_in?: string[];

  @TypeGraphQLField(() => BigInt, { nullable: true })
  tokenOneAmount_eq?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  tokenOneAmount_gt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  tokenOneAmount_gte?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  tokenOneAmount_lt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  tokenOneAmount_lte?: string;

  @TypeGraphQLField(() => [BigInt], { nullable: true })
  tokenOneAmount_in?: string[];

  @TypeGraphQLField(() => BigInt, { nullable: true })
  sharedAssetAmount_eq?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  sharedAssetAmount_gt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  sharedAssetAmount_gte?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  sharedAssetAmount_lt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  sharedAssetAmount_lte?: string;

  @TypeGraphQLField(() => [BigInt], { nullable: true })
  sharedAssetAmount_in?: string[];

  @TypeGraphQLField(() => BigInt, { nullable: true })
  marketCap_eq?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  marketCap_gt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  marketCap_gte?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  marketCap_lt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  marketCap_lte?: string;

  @TypeGraphQLField(() => [BigInt], { nullable: true })
  marketCap_in?: string[];

  @TypeGraphQLField(() => BigInt, { nullable: true })
  tradeAmount_eq?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  tradeAmount_gt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  tradeAmount_gte?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  tradeAmount_lt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  tradeAmount_lte?: string;

  @TypeGraphQLField(() => [BigInt], { nullable: true })
  tradeAmount_in?: string[];

  @TypeGraphQLField(() => PoolWhereInput, { nullable: true })
  pool?: PoolWhereInput;

  @TypeGraphQLField(() => PoolAssetVolumeWhereInput, { nullable: true })
  AND?: [PoolAssetVolumeWhereInput];

  @TypeGraphQLField(() => PoolAssetVolumeWhereInput, { nullable: true })
  OR?: [PoolAssetVolumeWhereInput];
}

@TypeGraphQLInputType()
export class PoolAssetVolumeWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class PoolAssetVolumeCreateInput {
  @TypeGraphQLField(() => ID)
  pool!: string;

  @TypeGraphQLField()
  timestamp!: string;

  @TypeGraphQLField({ nullable: true })
  tokenZeroAmount?: string;

  @TypeGraphQLField({ nullable: true })
  tokenOneAmount?: string;

  @TypeGraphQLField({ nullable: true })
  sharedAssetAmount?: string;

  @TypeGraphQLField({ nullable: true })
  marketCap?: string;

  @TypeGraphQLField({ nullable: true })
  tradeAmount?: string;
}

@TypeGraphQLInputType()
export class PoolAssetVolumeUpdateInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  pool?: string;

  @TypeGraphQLField({ nullable: true })
  timestamp?: string;

  @TypeGraphQLField({ nullable: true })
  tokenZeroAmount?: string;

  @TypeGraphQLField({ nullable: true })
  tokenOneAmount?: string;

  @TypeGraphQLField({ nullable: true })
  sharedAssetAmount?: string;

  @TypeGraphQLField({ nullable: true })
  marketCap?: string;

  @TypeGraphQLField({ nullable: true })
  tradeAmount?: string;
}

@ArgsType()
export class PoolAssetVolumeWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => PoolAssetVolumeWhereInput, { nullable: true })
  where?: PoolAssetVolumeWhereInput;

  @TypeGraphQLField(() => PoolAssetVolumeOrderByEnum, { nullable: true })
  orderBy?: PoolAssetVolumeOrderByEnum[];
}

@ArgsType()
export class PoolAssetVolumeCreateManyArgs {
  @TypeGraphQLField(() => [PoolAssetVolumeCreateInput])
  data!: PoolAssetVolumeCreateInput[];
}

@ArgsType()
export class PoolAssetVolumeUpdateArgs {
  @TypeGraphQLField() data!: PoolAssetVolumeUpdateInput;
  @TypeGraphQLField() where!: PoolAssetVolumeWhereUniqueInput;
}

export enum PoolOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  specVersion_ASC = "specVersion_ASC",
  specVersion_DESC = "specVersion_DESC",

  isActive_ASC = "isActive_ASC",
  isActive_DESC = "isActive_DESC",

  sharedToken_ASC = "sharedToken_ASC",
  sharedToken_DESC = "sharedToken_DESC",

  sharedAssetInitialBalance_ASC = "sharedAssetInitialBalance_ASC",
  sharedAssetInitialBalance_DESC = "sharedAssetInitialBalance_DESC",

  ownerAccount_ASC = "ownerAccount_ASC",
  ownerAccount_DESC = "ownerAccount_DESC",

  tokenZero_ASC = "tokenZero_ASC",
  tokenZero_DESC = "tokenZero_DESC",

  tokenOne_ASC = "tokenOne_ASC",
  tokenOne_DESC = "tokenOne_DESC",
}

registerEnumType(PoolOrderByEnum, {
  name: "PoolOrderByInput",
});

@TypeGraphQLInputType()
export class PoolWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_eq?: DateTimeString;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lt?: DateTimeString;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lte?: DateTimeString;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gt?: DateTimeString;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gte?: DateTimeString;

  @TypeGraphQLField(() => ID, { nullable: true })
  createdById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  createdById_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  updatedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  updatedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_eq?: DateTimeString;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lt?: DateTimeString;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lte?: DateTimeString;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gt?: DateTimeString;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gte?: DateTimeString;

  @TypeGraphQLField(() => ID, { nullable: true })
  deletedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  deletedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  specVersion_eq?: string;

  @TypeGraphQLField({ nullable: true })
  specVersion_contains?: string;

  @TypeGraphQLField({ nullable: true })
  specVersion_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  specVersion_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  specVersion_in?: string[];

  @TypeGraphQLField(() => Boolean, { nullable: true })
  isActive_eq?: Boolean;

  @TypeGraphQLField(() => [Boolean], { nullable: true })
  isActive_in?: Boolean[];

  @TypeGraphQLField(() => BigInt, { nullable: true })
  sharedAssetInitialBalance_eq?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  sharedAssetInitialBalance_gt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  sharedAssetInitialBalance_gte?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  sharedAssetInitialBalance_lt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  sharedAssetInitialBalance_lte?: string;

  @TypeGraphQLField(() => [BigInt], { nullable: true })
  sharedAssetInitialBalance_in?: string[];

  @TypeGraphQLField(() => TokenWhereInput, { nullable: true })
  sharedToken?: TokenWhereInput;

  @TypeGraphQLField(() => AccountWhereInput, { nullable: true })
  ownerAccount?: AccountWhereInput;

  @TypeGraphQLField(() => TokenWhereInput, { nullable: true })
  tokenZero?: TokenWhereInput;

  @TypeGraphQLField(() => TokenWhereInput, { nullable: true })
  tokenOne?: TokenWhereInput;

  @TypeGraphQLField(() => SwapActionWhereInput, { nullable: true })
  swapActions_none?: SwapActionWhereInput;

  @TypeGraphQLField(() => SwapActionWhereInput, { nullable: true })
  swapActions_some?: SwapActionWhereInput;

  @TypeGraphQLField(() => SwapActionWhereInput, { nullable: true })
  swapActions_every?: SwapActionWhereInput;

  @TypeGraphQLField(() => PoolAssetVolumeWhereInput, { nullable: true })
  assetsVolume_none?: PoolAssetVolumeWhereInput;

  @TypeGraphQLField(() => PoolAssetVolumeWhereInput, { nullable: true })
  assetsVolume_some?: PoolAssetVolumeWhereInput;

  @TypeGraphQLField(() => PoolAssetVolumeWhereInput, { nullable: true })
  assetsVolume_every?: PoolAssetVolumeWhereInput;

  @TypeGraphQLField(() => TokenWhereInput, { nullable: true })
  tokenparentPool_none?: TokenWhereInput;

  @TypeGraphQLField(() => TokenWhereInput, { nullable: true })
  tokenparentPool_some?: TokenWhereInput;

  @TypeGraphQLField(() => TokenWhereInput, { nullable: true })
  tokenparentPool_every?: TokenWhereInput;

  @TypeGraphQLField(() => PoolWhereInput, { nullable: true })
  AND?: [PoolWhereInput];

  @TypeGraphQLField(() => PoolWhereInput, { nullable: true })
  OR?: [PoolWhereInput];
}

@TypeGraphQLInputType()
export class PoolWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class PoolCreateInput {
  @TypeGraphQLField(() => DateTime)
  createdAt!: DateTimeString;

  @TypeGraphQLField(() => DateTime)
  deletedAt!: DateTimeString;

  @TypeGraphQLField({ nullable: true })
  specVersion?: string;

  @TypeGraphQLField()
  isActive!: boolean;

  @TypeGraphQLField(() => ID, { nullable: true })
  sharedToken?: string;

  @TypeGraphQLField({ nullable: true })
  sharedAssetInitialBalance?: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  ownerAccount?: string;

  @TypeGraphQLField(() => ID)
  tokenZero!: string;

  @TypeGraphQLField(() => ID)
  tokenOne!: string;
}

@TypeGraphQLInputType()
export class PoolUpdateInput {
  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt?: DateTimeString;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt?: DateTimeString;

  @TypeGraphQLField({ nullable: true })
  specVersion?: string;

  @TypeGraphQLField({ nullable: true })
  isActive?: boolean;

  @TypeGraphQLField(() => ID, { nullable: true })
  sharedToken?: string;

  @TypeGraphQLField({ nullable: true })
  sharedAssetInitialBalance?: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  ownerAccount?: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  tokenZero?: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  tokenOne?: string;
}

@ArgsType()
export class PoolWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => PoolWhereInput, { nullable: true })
  where?: PoolWhereInput;

  @TypeGraphQLField(() => PoolOrderByEnum, { nullable: true })
  orderBy?: PoolOrderByEnum[];
}

@ArgsType()
export class PoolCreateManyArgs {
  @TypeGraphQLField(() => [PoolCreateInput])
  data!: PoolCreateInput[];
}

@ArgsType()
export class PoolUpdateArgs {
  @TypeGraphQLField() data!: PoolUpdateInput;
  @TypeGraphQLField() where!: PoolWhereUniqueInput;
}

export enum AccountOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  specVersion_ASC = "specVersion_ASC",
  specVersion_DESC = "specVersion_DESC",
}

registerEnumType(AccountOrderByEnum, {
  name: "AccountOrderByInput",
});

@TypeGraphQLInputType()
export class AccountWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  createdById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  createdById_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  updatedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  updatedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  deletedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  deletedById_in?: string[];

  @TypeGraphQLField(() => Int, { nullable: true })
  specVersion_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  specVersion_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  specVersion_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  specVersion_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  specVersion_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  specVersion_in?: number[];

  @TypeGraphQLField(() => PoolWhereInput, { nullable: true })
  createdPools_none?: PoolWhereInput;

  @TypeGraphQLField(() => PoolWhereInput, { nullable: true })
  createdPools_some?: PoolWhereInput;

  @TypeGraphQLField(() => PoolWhereInput, { nullable: true })
  createdPools_every?: PoolWhereInput;

  @TypeGraphQLField(() => TradeTransferWhereInput, { nullable: true })
  tradeTransferOut_none?: TradeTransferWhereInput;

  @TypeGraphQLField(() => TradeTransferWhereInput, { nullable: true })
  tradeTransferOut_some?: TradeTransferWhereInput;

  @TypeGraphQLField(() => TradeTransferWhereInput, { nullable: true })
  tradeTransferOut_every?: TradeTransferWhereInput;

  @TypeGraphQLField(() => TradeTransferWhereInput, { nullable: true })
  tradeTransferIn_none?: TradeTransferWhereInput;

  @TypeGraphQLField(() => TradeTransferWhereInput, { nullable: true })
  tradeTransferIn_some?: TradeTransferWhereInput;

  @TypeGraphQLField(() => TradeTransferWhereInput, { nullable: true })
  tradeTransferIn_every?: TradeTransferWhereInput;

  @TypeGraphQLField(() => SwapActionWhereInput, { nullable: true })
  swapactionaccount_none?: SwapActionWhereInput;

  @TypeGraphQLField(() => SwapActionWhereInput, { nullable: true })
  swapactionaccount_some?: SwapActionWhereInput;

  @TypeGraphQLField(() => SwapActionWhereInput, { nullable: true })
  swapactionaccount_every?: SwapActionWhereInput;

  @TypeGraphQLField(() => AccountWhereInput, { nullable: true })
  AND?: [AccountWhereInput];

  @TypeGraphQLField(() => AccountWhereInput, { nullable: true })
  OR?: [AccountWhereInput];
}

@TypeGraphQLInputType()
export class AccountWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class AccountCreateInput {
  @TypeGraphQLField({ nullable: true })
  specVersion?: number;
}

@TypeGraphQLInputType()
export class AccountUpdateInput {
  @TypeGraphQLField({ nullable: true })
  specVersion?: number;
}

@ArgsType()
export class AccountWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => AccountWhereInput, { nullable: true })
  where?: AccountWhereInput;

  @TypeGraphQLField(() => AccountOrderByEnum, { nullable: true })
  orderBy?: AccountOrderByEnum[];
}

@ArgsType()
export class AccountCreateManyArgs {
  @TypeGraphQLField(() => [AccountCreateInput])
  data!: AccountCreateInput[];
}

@ArgsType()
export class AccountUpdateArgs {
  @TypeGraphQLField() data!: AccountUpdateInput;
  @TypeGraphQLField() where!: AccountWhereUniqueInput;
}

export enum NoBondRecordAccountOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  firstRewardAt_ASC = "firstRewardAt_ASC",
  firstRewardAt_DESC = "firstRewardAt_DESC",
}

registerEnumType(NoBondRecordAccountOrderByEnum, {
  name: "NoBondRecordAccountOrderByInput",
});

@TypeGraphQLInputType()
export class NoBondRecordAccountWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  createdById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  createdById_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  updatedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  updatedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  deletedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  deletedById_in?: string[];

  @TypeGraphQLField(() => Int, { nullable: true })
  firstRewardAt_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  firstRewardAt_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  firstRewardAt_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  firstRewardAt_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  firstRewardAt_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  firstRewardAt_in?: number[];

  @TypeGraphQLField(() => NoBondRecordAccountWhereInput, { nullable: true })
  AND?: [NoBondRecordAccountWhereInput];

  @TypeGraphQLField(() => NoBondRecordAccountWhereInput, { nullable: true })
  OR?: [NoBondRecordAccountWhereInput];
}

@TypeGraphQLInputType()
export class NoBondRecordAccountWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class NoBondRecordAccountCreateInput {
  @TypeGraphQLField()
  firstRewardAt!: number;
}

@TypeGraphQLInputType()
export class NoBondRecordAccountUpdateInput {
  @TypeGraphQLField({ nullable: true })
  firstRewardAt?: number;
}

@ArgsType()
export class NoBondRecordAccountWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => NoBondRecordAccountWhereInput, { nullable: true })
  where?: NoBondRecordAccountWhereInput;

  @TypeGraphQLField(() => NoBondRecordAccountOrderByEnum, { nullable: true })
  orderBy?: NoBondRecordAccountOrderByEnum[];
}

@ArgsType()
export class NoBondRecordAccountCreateManyArgs {
  @TypeGraphQLField(() => [NoBondRecordAccountCreateInput])
  data!: NoBondRecordAccountCreateInput[];
}

@ArgsType()
export class NoBondRecordAccountUpdateArgs {
  @TypeGraphQLField() data!: NoBondRecordAccountUpdateInput;
  @TypeGraphQLField() where!: NoBondRecordAccountWhereUniqueInput;
}

export enum StakingRewardOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  address_ASC = "address_ASC",
  address_DESC = "address_DESC",

  balance_ASC = "balance_ASC",
  balance_DESC = "balance_DESC",

  date_ASC = "date_ASC",
  date_DESC = "date_DESC",
}

registerEnumType(StakingRewardOrderByEnum, {
  name: "StakingRewardOrderByInput",
});

@TypeGraphQLInputType()
export class StakingRewardWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  createdById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  createdById_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  updatedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  updatedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  deletedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  deletedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  address_eq?: string;

  @TypeGraphQLField({ nullable: true })
  address_contains?: string;

  @TypeGraphQLField({ nullable: true })
  address_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  address_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  address_in?: string[];

  @TypeGraphQLField(() => BigInt, { nullable: true })
  balance_eq?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  balance_gt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  balance_gte?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  balance_lt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  balance_lte?: string;

  @TypeGraphQLField(() => [BigInt], { nullable: true })
  balance_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  date_eq?: DateTimeString;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  date_lt?: DateTimeString;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  date_lte?: DateTimeString;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  date_gt?: DateTimeString;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  date_gte?: DateTimeString;

  @TypeGraphQLField(() => StakingRewardWhereInput, { nullable: true })
  AND?: [StakingRewardWhereInput];

  @TypeGraphQLField(() => StakingRewardWhereInput, { nullable: true })
  OR?: [StakingRewardWhereInput];
}

@TypeGraphQLInputType()
export class StakingRewardWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class StakingRewardCreateInput {
  @TypeGraphQLField()
  address!: string;

  @TypeGraphQLField()
  balance!: string;

  @TypeGraphQLField(() => DateTime)
  date!: DateTimeString;
}

@TypeGraphQLInputType()
export class StakingRewardUpdateInput {
  @TypeGraphQLField({ nullable: true })
  address?: string;

  @TypeGraphQLField({ nullable: true })
  balance?: string;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  date?: DateTimeString;
}

@ArgsType()
export class StakingRewardWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => StakingRewardWhereInput, { nullable: true })
  where?: StakingRewardWhereInput;

  @TypeGraphQLField(() => StakingRewardOrderByEnum, { nullable: true })
  orderBy?: StakingRewardOrderByEnum[];
}

@ArgsType()
export class StakingRewardCreateManyArgs {
  @TypeGraphQLField(() => [StakingRewardCreateInput])
  data!: StakingRewardCreateInput[];
}

@ArgsType()
export class StakingRewardUpdateArgs {
  @TypeGraphQLField() data!: StakingRewardUpdateInput;
  @TypeGraphQLField() where!: StakingRewardWhereUniqueInput;
}

export enum StakingSlashOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  address_ASC = "address_ASC",
  address_DESC = "address_DESC",

  balance_ASC = "balance_ASC",
  balance_DESC = "balance_DESC",

  date_ASC = "date_ASC",
  date_DESC = "date_DESC",
}

registerEnumType(StakingSlashOrderByEnum, {
  name: "StakingSlashOrderByInput",
});

@TypeGraphQLInputType()
export class StakingSlashWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  createdById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  createdById_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  updatedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  updatedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  deletedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  deletedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  address_eq?: string;

  @TypeGraphQLField({ nullable: true })
  address_contains?: string;

  @TypeGraphQLField({ nullable: true })
  address_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  address_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  address_in?: string[];

  @TypeGraphQLField(() => BigInt, { nullable: true })
  balance_eq?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  balance_gt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  balance_gte?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  balance_lt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  balance_lte?: string;

  @TypeGraphQLField(() => [BigInt], { nullable: true })
  balance_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  date_eq?: DateTimeString;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  date_lt?: DateTimeString;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  date_lte?: DateTimeString;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  date_gt?: DateTimeString;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  date_gte?: DateTimeString;

  @TypeGraphQLField(() => StakingSlashWhereInput, { nullable: true })
  AND?: [StakingSlashWhereInput];

  @TypeGraphQLField(() => StakingSlashWhereInput, { nullable: true })
  OR?: [StakingSlashWhereInput];
}

@TypeGraphQLInputType()
export class StakingSlashWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class StakingSlashCreateInput {
  @TypeGraphQLField()
  address!: string;

  @TypeGraphQLField()
  balance!: string;

  @TypeGraphQLField(() => DateTime)
  date!: DateTimeString;
}

@TypeGraphQLInputType()
export class StakingSlashUpdateInput {
  @TypeGraphQLField({ nullable: true })
  address?: string;

  @TypeGraphQLField({ nullable: true })
  balance?: string;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  date?: DateTimeString;
}

@ArgsType()
export class StakingSlashWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => StakingSlashWhereInput, { nullable: true })
  where?: StakingSlashWhereInput;

  @TypeGraphQLField(() => StakingSlashOrderByEnum, { nullable: true })
  orderBy?: StakingSlashOrderByEnum[];
}

@ArgsType()
export class StakingSlashCreateManyArgs {
  @TypeGraphQLField(() => [StakingSlashCreateInput])
  data!: StakingSlashCreateInput[];
}

@ArgsType()
export class StakingSlashUpdateArgs {
  @TypeGraphQLField() data!: StakingSlashUpdateInput;
  @TypeGraphQLField() where!: StakingSlashWhereUniqueInput;
}

export enum SumRewardOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  accountReward_ASC = "accountReward_ASC",
  accountReward_DESC = "accountReward_DESC",

  accountSlash_ASC = "accountSlash_ASC",
  accountSlash_DESC = "accountSlash_DESC",

  accountTotal_ASC = "accountTotal_ASC",
  accountTotal_DESC = "accountTotal_DESC",
}

registerEnumType(SumRewardOrderByEnum, {
  name: "SumRewardOrderByInput",
});

@TypeGraphQLInputType()
export class SumRewardWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  createdById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  createdById_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  updatedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  updatedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  deletedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  deletedById_in?: string[];

  @TypeGraphQLField(() => BigInt, { nullable: true })
  accountReward_eq?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  accountReward_gt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  accountReward_gte?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  accountReward_lt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  accountReward_lte?: string;

  @TypeGraphQLField(() => [BigInt], { nullable: true })
  accountReward_in?: string[];

  @TypeGraphQLField(() => BigInt, { nullable: true })
  accountSlash_eq?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  accountSlash_gt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  accountSlash_gte?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  accountSlash_lt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  accountSlash_lte?: string;

  @TypeGraphQLField(() => [BigInt], { nullable: true })
  accountSlash_in?: string[];

  @TypeGraphQLField(() => BigInt, { nullable: true })
  accountTotal_eq?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  accountTotal_gt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  accountTotal_gte?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  accountTotal_lt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  accountTotal_lte?: string;

  @TypeGraphQLField(() => [BigInt], { nullable: true })
  accountTotal_in?: string[];

  @TypeGraphQLField(() => SumRewardWhereInput, { nullable: true })
  AND?: [SumRewardWhereInput];

  @TypeGraphQLField(() => SumRewardWhereInput, { nullable: true })
  OR?: [SumRewardWhereInput];
}

@TypeGraphQLInputType()
export class SumRewardWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class SumRewardCreateInput {
  @TypeGraphQLField()
  accountReward!: string;

  @TypeGraphQLField()
  accountSlash!: string;

  @TypeGraphQLField()
  accountTotal!: string;
}

@TypeGraphQLInputType()
export class SumRewardUpdateInput {
  @TypeGraphQLField({ nullable: true })
  accountReward?: string;

  @TypeGraphQLField({ nullable: true })
  accountSlash?: string;

  @TypeGraphQLField({ nullable: true })
  accountTotal?: string;
}

@ArgsType()
export class SumRewardWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => SumRewardWhereInput, { nullable: true })
  where?: SumRewardWhereInput;

  @TypeGraphQLField(() => SumRewardOrderByEnum, { nullable: true })
  orderBy?: SumRewardOrderByEnum[];
}

@ArgsType()
export class SumRewardCreateManyArgs {
  @TypeGraphQLField(() => [SumRewardCreateInput])
  data!: SumRewardCreateInput[];
}

@ArgsType()
export class SumRewardUpdateArgs {
  @TypeGraphQLField() data!: SumRewardUpdateInput;
  @TypeGraphQLField() where!: SumRewardWhereUniqueInput;
}
